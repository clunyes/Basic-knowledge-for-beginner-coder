package java.core;

public class gc_old {
    /**
     *gc_old 需要解决的问题
     * 1. 哪些对象可以被回收
     * 2. 何时回收这些对象
     * 3. 用什么方式回收
     *
     * gc方法
     * 1. 引用计数法：相互引用，死循环
     * 2. 根搜索法：根节点出发，是否可达
     * 可以当做GC roots的对象有以下几种：
     1、虚拟机栈中的引用的对象。
     2、方法区中的类静态属性引用的对象。
     3、方法区中的常量引用的对象。
     4、本地方法栈中JNI的引用的对象。
     * 该方法解决了哪些对象可以回收的问题
     *
     * 3. 标记清除法：效率低，需要停止程序
     * 4. 复制算法：存活对象复制，浪费一半的内存
     * 5. 标记整理法：也会停止程序
     *
     *JAVA堆（新生代和年老代）
     * 方法区（永久代）
     * 回收的时机：
     JVM在进行GC时，并非每次都对上面三个内存区域一起回收的，大部分时候回收的都是指新生代。
     因此GC按照回收的区域又分了两种类型，一种是普通GC（minor GC），一种是全局GC（major GC or Full GC），它们所针对的区域如下。
     普通GC（minor GC）：只针对新生代区域的GC。全局GC（major GC or Full GC）：针对年老代的GC，偶尔伴随对新生代的GC以及对永久代的GC。
     由于年老代与永久代相对来说GC效果不好，而且二者的内存使用增长速度也慢，因此一般情况下，需要经过好几次普通GC，才会触发一次全局GC。
     */
}
