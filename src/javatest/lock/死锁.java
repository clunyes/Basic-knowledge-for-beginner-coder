package javatest.lock;

public class 死锁 {
    /**
     * 死锁产生的四个条件：
     *
     *     互斥条件： 该资源任意一个时刻只由一个线程占用；
     *     请求与保持条件：一个线程因请求资源而阻塞，对已获得的资源保持不放；
     *     不剥夺条件：线程已经获得的资源在未使用完之前不能被其他线程强行剥夺，只由自己使用完毕后才释放资源；
     *     循环等待条件：若干线程之间形成一种头尾相接的循环等待资源关系。
     */

    /**
     * 只需要破坏产生死锁的四个条件之一即可。
     *
     *     破坏互斥条件：这个条件我们没有办法破坏，因为我们用锁本身就是想让他们互斥的（临界资源需要互斥访问）。
     *     破坏请求与保持条件：一次性申请所有的资源
     *     破坏不剥夺条件：占用部分资源的线程进一步申请其他资源时，如果申请不到，可以主动释放它占有的资源。
     *     破坏循环等待条件：靠按顺序申请资源来预防。按照某一顺序申请资源，释放资源则反序释放。破坏循环等待条件。
     */
}
